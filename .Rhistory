sbGenealNew = sbGeneal
sbGenealNew = sbGeneal
sbGenealNew$child = paste(sbGenealNew$child, sbGenealNew$devYear)
plotAncDes("Lee", sbGenealNew, mAnc = 6, mDes = 6, vCol = "blue")
sbGenealNew = sbGeneal
str(sbGenealNew$child)
str(paste(sbGenealNew$child, sbGenealNew$devYear))
dev.off()
dev.off()
rm(list=ls())
data("sbGeneal", package = "ggenealogy")
plotAncDes("Lee", sbGeneal, mAnc = 6, mDes = 6, vCol = "blue")
sbGeneal$devYear
sbGenealNew = sbGeneal
sbGenealNew$child = paste(sbGenealNew$child, sbGenealNew$devYear)
plotAncDes("Lee", sbGenealNew, mAnc = 6, mDes = 6, vCol = "blue")
sbGenealNew = sbGeneal
str(sbGenealNew$child)
str(paste(sbGenealNew$child, sbGenealNew$devYear))
View(sbGenealNew)
plotAncDes("Lee 1958.00", sbGenealNew, mAnc = 6, mDes = 6, vCol = "blue")
View(sbGenealNew)
sbGenealNew$child
sbGenealNew$child = paste(sbGenealNew$child, sbGenealNew$devYear)
sbGenealNew$child
plotAncDes("Lee 1958", sbGenealNew, mAnc = 6, mDes = 6, vCol = "blue")
which(sbGenealNew$child=="Lee 1958")
sbGenealNew = sbGeneal
sbGenealNew$child
sbGenealNew$child = paste(sbGenealNew$child, sbGenealNew$devYear)
sbGenealNew$child
str(sbGenealNew)
sbGenealNew = sbGeneal
getVariable("Hutcheson", sbGeneal, "devYear")
sbGenealNew = sbGeneal
sbGenealNew$parent = paste(sbGenealNew$parent, getVariable(sbGenealNew$parent, sbGeneal, "devYear"))
sbGenealNew = sbGeneal
newParent = paste(sbGenealNew$parent, getVariable(sbGenealNew$parent, sbGeneal, "devYear"))
newParent
getVariable(sbGenealNew$parent, sbGeneal, "devYear")
sbGenealNew = sbGeneal
str(sbGenealNew$parent)
sapply(sbGenealNew$parent, function(x) getVariable(x, sbGeneal, "devYear"))
newParent = paste(sbGenealNew$parent, sapply(sbGenealNew$parent, function(x) getVariable(x, sbGeneal, "devYear")))
newParent
newChildName = paste(sbGenealNew$child, sbGenealNew$devYear)
sbGenealNew = sbGeneal
newParentName = paste(sbGenealNew$parent, sapply(sbGenealNew$parent, function(x) getVariable(x, sbGeneal, "devYear")))
newChildName = paste(sbGenealNew$child, sbGenealNew$devYear)
sbGenealNew$parent = newParentName
sbGenealNew$child = newChildName
plotAncDes("Lee 1958", sbGenealNew, mAnc = 6, mDes = 6, vCol = "blue")
sbGenealNew = sbGeneal
dev.off()
sbGenealNew = sbGeneal
newParentName = paste0(sbGenealNew$parent, "\n", sapply(sbGenealNew$parent, function(x) getVariable(x, sbGeneal, "devYear")))
newChildName = paste0(sbGenealNew$child, "\n", sbGenealNew$devYear)
sbGenealNew$parent = newParentName
sbGenealNew$child = newChildName
plotAncDes("Lee 1958", sbGenealNew, mAnc = 6, mDes = 6, vCol = "blue")
plotAncDes("Lee\n1958", sbGenealNew, mAnc = 6, mDes = 6, vCol = "blue")
dev.off()
sbGenealNew = sbGeneal
newParentName = paste0(sbGenealNew$parent, " (", sapply(sbGenealNew$parent, function(x) getVariable(x, sbGeneal, "devYear")), ")")
newChildName = paste0(sbGenealNew$child, " (", sbGenealNew$devYear, ")")
sbGenealNew$parent = newParentName
sbGenealNew$child = newChildName
plotAncDes("Lee (1958)", sbGenealNew, mAnc = 6, mDes = 6, vCol = "blue")
dev.off()
dev.off()
rm(list=ls())
library(ggenealogy)
# 1. Create original plot (orig.png)
data("sbGeneal", package = "ggenealogy")
plotAncDes("Lee", sbGeneal, mAnc = 6, mDes = 6, vCol = "blue")
# 2. Create plot with labels as "name year" (namespaceyear.png)
sbGenealNew = sbGeneal
# Change the labels in the dataset to now be the original name, space, year
newParentName = paste(sbGenealNew$parent, sapply(sbGenealNew$parent, function(x) getVariable(x, sbGeneal, "devYear")))
newChildName = paste(sbGenealNew$child, sbGenealNew$devYear)
sbGenealNew$parent = newParentName
sbGenealNew$child = newChildName
plotAncDes("Lee 1958", sbGenealNew, mAnc = 6, mDes = 6, vCol = "blue")
# 3. Create plot with labels as "name newline year" (namenlyear.png)
sbGenealNew = sbGeneal
# Change the labels in the dataset to now be the original name, new line, year
newParentName = paste0(sbGenealNew$parent, "\n", sapply(sbGenealNew$parent, function(x) getVariable(x, sbGeneal, "devYear")))
newChildName = paste0(sbGenealNew$child, "\n", sbGenealNew$devYear)
sbGenealNew$parent = newParentName
sbGenealNew$child = newChildName
plotAncDes("Lee\n1958", sbGenealNew, mAnc = 6, mDes = 6, vCol = "blue")
# 4. Create plot with labels as "name paranthesis year)" (namepyear.png)
sbGenealNew = sbGeneal
# Change the labels in the dataset to now be the original name, paranthesis, year
newParentName = paste0(sbGenealNew$parent, " (", sapply(sbGenealNew$parent, function(x) getVariable(x, sbGeneal, "devYear")), ")")
newChildName = paste0(sbGenealNew$child, " (", sbGenealNew$devYear, ")")
sbGenealNew$parent = newParentName
sbGenealNew$child = newChildName
plotAncDes("Lee (1958)", sbGenealNew, mAnc = 6, mDes = 6, vCol = "blue")
#eda-tree.R
library(readxl)
library(ggenealogy)
library(dplyr)
folder <- "C:/Users/friendly/Dropbox/Documents/publications/EDA-History"
EDA_geneaology <- read_excel(file.path(folder, "EDA-geneaology.xlsx"))
View(EDA_geneaology)
gsheet <- "https://docs.google.com/spreadsheets/d/1Vt1pjFGLMM3kzH9sPesxZKlro3Q22pF0ReFvvE7YhB0/edit?usp=sharing"
library(googlesheets)
install.packages("googlesheets")
library(googlesheets)
gs <- gs_url(gsheet)
EDA_gen <- gs_read(gs)
replicate(2, "my_string")
replicate(2, "ID")
replicate(2000, "ID")
paste0(replicate(2000, "ID"), 1:2000)
numeric(1,2000)
randu(1,2000)
rand(1,2000)
rand(1:2000)
runif(2000)
data = data.frame(ID=paste0(replicate(2000, "ID"), 1:2000), PyLa.1 = runif(2000), PyLa.2 = runif(2000), PyLa.3 = runif(2000), Py.1 = runif(2000), Py.2 = runif(2000), Py.3 = runif(2000))
str(dataa)
str(data)
data$ID = as.character(data$ID)
str(data)
data = data.frame(ID=paste0(replicate(2000, "ID"), 1:2000), PyLa.1 = runif(2000), PyLa.2 = runif(2000), PyLa.3 = runif(2000), Py.1 = runif(2000), Py.2 = runif(2000), Py.3 = runif(2000))
data$ID = as.character(data$ID)
data_st <- as.data.frame(t(apply(as.matrix(data[,-1]), 1, scale)))
data_st$ID <- as.character(data$ID)
data_st <- data_st[,c(length(data_st), 1:length(data_st)-1)]
colnames(data_st) <- colnames(data)
nID <- which(is.nan(data_st[,2]))
data_st[nID,2:length(data_st)] <- 0
ret <- plotPCP(data=data_st, saveFile = FALSE)
library(bigPint)
ret <- plotPCP(data=data_st, saveFile = FALSE)
ret[["S1_S3"]]
str(ret)
str(ret)
ret <- plotPCP(data=data_st, saveFile = FALSE)
str(ret)
ret[["PyLa_Py"]]
ret <- plotSM(data=data, saveFile = FALSE)
ret[["PyLa_Py"]]
data = data.frame(ID=paste0(replicate(2000, "ID"), 1:2000), PyLa.1 = 2*runif(2000), PyLa.2 = runif(2000), PyLa.3 = runif(2000), Py.1 = 1.1*runif(2000), Py.2 = runif(2000), Py.3 = runif(2000))
data$ID = as.character(data$ID)
data_st <- as.data.frame(t(apply(as.matrix(data[,-1]), 1, scale)))
data_st$ID <- as.character(data$ID)
data_st <- data_st[,c(length(data_st), 1:length(data_st)-1)]
colnames(data_st) <- colnames(data)
nID <- which(is.nan(data_st[,2]))
data_st[nID,2:length(data_st)] <- 0
ret <- plotPCP(data=data_st, saveFile = FALSE)
ret[["PyLa_Py"]]
data = data.frame(ID=paste0(replicate(2000, "ID"), 1:2000), PyLa.1 = runif(2000), PyLa.2 = runif(2000), PyLa.3 = runif(2000), Py.1 = runif(2000), Py.2 = runif(2000), Py.3 = runif(2000))
data$ID = as.character(data$ID)
data_st <- as.data.frame(t(apply(as.matrix(data[,-1]), 1, scale)))
data_st$ID <- as.character(data$ID)
data_st <- data_st[,c(length(data_st), 1:length(data_st)-1)]
colnames(data_st) <- colnames(data)
nID <- which(is.nan(data_st[,2]))
data_st[nID,2:length(data_st)] <- 0
ret <- plotPCP(data=data_st, saveFile = FALSE)
ret[["PyLa_Py"]]
ret <- plotSM(data=data, saveFile = FALSE)
ret[["PyLa_Py"]]
library(edgeR)
library(data.table)
rownames(data) = data[,1]
y = DGEList(counts=data[,-1])
group = c(1,1,1,2,2,2)
y = DGEList(counts=y, group=group)
Group = factor(c(rep("PyLa",3), rep("Py",3)))
design <- model.matrix(~0+Group, data=y$samples)
colnames(design) <- levels(Group)
y <- estimateDisp(y, design)
fit <- glmFit(y, design)
str(data)
dataMetrics <- list()
contrast=rep(0,ncol(fit))
data = data.frame(ID=paste0(replicate(2000, "ID"), 1:2000), PyLa.1 = runif(2000), PyLa.2 = runif(2000), PyLa.3 = runif(2000), Py.1 = runif(2000), Py.2 = runif(2000), Py.3 = runif(2000))
data$ID = as.character(data$ID)
data_st <- as.data.frame(t(apply(as.matrix(data[,-1]), 1, scale)))
data_st$ID <- as.character(data$ID)
data_st <- data_st[,c(length(data_st), 1:length(data_st)-1)]
colnames(data_st) <- colnames(data)
nID <- which(is.nan(data_st[,2]))
data_st[nID,2:length(data_st)] <- 0
rownames(data) = data[,1]
y = DGEList(counts=data[,-1])
group = c(1,1,1,2,2,2)
y = DGEList(counts=y, group=group)
Group = factor(c(rep("PyLa",3), rep("Py",3)))
design <- model.matrix(~0+Group, data=y$samples)
colnames(design) <- levels(Group)
y <- estimateDisp(y, design)
fit <- glmFit(y, design)
dataMetrics <- list()
contrast=rep(0,ncol(fit))
contrast[1]=1
contrast[2]=-1
lrt <- glmLRT(fit, contrast=contrast)
lrt <- topTags(lrt, n = nrow(y[[1]]))[[1]]
lrt <- setDT(lrt, keep.rownames = TRUE)[]
colnames(lrt)[1] = "ID"
lrt <- as.data.frame(lrt)
dataMetrics[[paste0(colnames(fit)[1], "_", colnames(fit)[2])]] <- lrt
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE)
ret[["PyLa_Py"]] + ggtitle("DEGs (FDR < 0.1)")
library(ggplot2)
ret[["PyLa_Py"]] + ggtitle("DEGs (FDR < 0.1)")
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE, hover = TRUE)
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE)
ret[["PyLa_Py"]] + ggtitle("DEGs (FDR < 0.1)")
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE, hover = TRUE)
ret[["PyLa_Py"]] %>% layout(title="DEGs (FDR < 0.1)")
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE, hover = TRUE)
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE)
str(data)
str(dataMetrics)
names(dataMetrics) <- "PyLa_Py"
str(dataMetrics)
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE, hover = TRUE)
str(data_st)
data <- data[c(1,5,6,7,2,3,4)]
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE, hover = TRUE)
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE)
ret[["PyLa_Py"]] + ggtitle("DEGs (FDR < 0.1)")
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE, hover = TRUE)
rm(list=ls())
library(bigPint)
library(dplyr)
library(ggplot2)
library(plotly)
data("soybean_cn_sub")
data = soybean_cn_sub %>% select(ID, starts_with("S1"), starts_with("S3"))
data_st <- as.data.frame(t(apply(as.matrix(data[,-1]), 1, scale)))
data_st$ID <- as.character(data$ID)
data_st <- data_st[,c(length(data_st), 1:length(data_st)-1)]
colnames(data_st) <- colnames(data)
nID <- which(is.nan(data_st[,2]))
data_st[nID,2:length(data_st)] <- 0
ret <- plotPCP(data=data_st, saveFile = FALSE)
ret[["S1_S3"]]
ret <- plotSM(data=data, saveFile = FALSE)
ret[["S1_S3"]]
library(edgeR)
library(data.table)
rownames(data) = data[,1]
y = DGEList(counts=data[,-1])
group = c(1,1,1,2,2,2)
y = DGEList(counts=y, group=group)
Group = factor(c(rep("S1",3), rep("S3",3)))
design <- model.matrix(~0+Group, data=y$samples)
colnames(design) <- levels(Group)
y <- estimateDisp(y, design)
fit <- glmFit(y, design)
dataMetrics <- list()
contrast=rep(0,ncol(fit))
contrast[1]=1
contrast[2]=-1
lrt <- glmLRT(fit, contrast=contrast)
lrt <- topTags(lrt, n = nrow(y[[1]]))[[1]]
lrt <- setDT(lrt, keep.rownames = TRUE)[]
colnames(lrt)[1] = "ID"
lrt <- as.data.frame(lrt)
dataMetrics[[paste0(colnames(fit)[1], "_", colnames(fit)[2])]] <- lrt
str(dataMetrics, strict.width = "wrap")
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE)
ret[["S1_S3"]] + ggtitle("DEGs (FDR < 0.1)")
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE, hover = TRUE)
ret[["S1_S3"]] %>% layout(title="DEGs (FDR < 0.1)")
str(data_st)
dev.off()
dev.off()
dev.off()
rm(list=ls())
library(bigPint)
library(dplyr)
library(ggplot2)
library(plotly)
data = data.frame(ID=paste0(replicate(2000, "ID"), 1:2000), PyLa.1 = runif(2000), PyLa.2 = runif(2000), PyLa.3 = runif(2000), Py.1 = runif(2000), Py.2 = runif(2000), Py.3 = runif(2000))
data$ID = as.character(data$ID)
data_st <- as.data.frame(t(apply(as.matrix(data[,-1]), 1, scale)))
data_st$ID <- as.character(data$ID)
data_st <- data_st[,c(length(data_st), 1:length(data_st)-1)]
colnames(data_st) <- colnames(data)
nID <- which(is.nan(data_st[,2]))
data_st[nID,2:length(data_st)] <- 0
ret <- plotPCP(data=data_st, saveFile = FALSE)
ret[["PyLa_Py"]]
ret <- plotSM(data=data, saveFile = FALSE)
ret[["PyLa_Py"]]
library(edgeR)
library(data.table)
rownames(data) = data[,1]
y = DGEList(counts=data[,-1])
group = c(1,1,1,2,2,2)
y = DGEList(counts=y, group=group)
Group = factor(c(rep("PyLa",3), rep("Py",3)))
design <- model.matrix(~0+Group, data=y$samples)
colnames(design) <- levels(Group)
y <- estimateDisp(y, design)
fit <- glmFit(y, design)
dataMetrics <- list()
contrast=rep(0,ncol(fit))
contrast[1]=1
contrast[2]=-1
lrt <- glmLRT(fit, contrast=contrast)
lrt <- topTags(lrt, n = nrow(y[[1]]))[[1]]
lrt <- setDT(lrt, keep.rownames = TRUE)[]
colnames(lrt)[1] = "ID"
lrt <- as.data.frame(lrt)
dataMetrics[[paste0(colnames(fit)[1], "_", colnames(fit)[2])]] <- lrt
str(dataMetrics, strict.width = "wrap")
str(data_st)
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE)
ret[["PyLa_Py"]] + ggtitle("DEGs (FDR < 0.1)")
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE, hover = TRUE)
names(dataMetrics) <- "PyLa_Py"
str(data_st)
names(dataMetrics) <- "Py_PyLa"
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE, hover = TRUE)
str(dataMetrics)
str(data_st)
str(dataMetrics)
names(dataMetrics) <- "PyLa_Py"
str(dataMetrics)
str(data)
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE)
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE, hover = TRUE)
rm(list=ls())
dev.off()
dev.off()
data("soybean_cn_sub")
data = soybean_cn_sub %>% select(ID, starts_with("S1"), starts_with("S3"))
data_st <- as.data.frame(t(apply(as.matrix(data[,-1]), 1, scale)))
data_st$ID <- as.character(data$ID)
data_st <- data_st[,c(length(data_st), 1:length(data_st)-1)]
colnames(data_st) <- colnames(data)
nID <- which(is.nan(data_st[,2]))
data_st[nID,2:length(data_st)] <- 0
ret <- plotPCP(data=data_st, saveFile = FALSE)
ret[["S1_S3"]]
ret <- plotSM(data=data, saveFile = FALSE)
ret[["S1_S3"]]
library(edgeR)
library(data.table)
rownames(data) = data[,1]
y = DGEList(counts=data[,-1])
group = c(1,1,1,2,2,2)
y = DGEList(counts=y, group=group)
Group = factor(c(rep("S1",3), rep("S3",3)))
design <- model.matrix(~0+Group, data=y$samples)
colnames(design) <- levels(Group)
y <- estimateDisp(y, design)
fit <- glmFit(y, design)
dataMetrics <- list()
contrast=rep(0,ncol(fit))
contrast[1]=1
contrast[2]=-1
lrt <- glmLRT(fit, contrast=contrast)
lrt <- topTags(lrt, n = nrow(y[[1]]))[[1]]
lrt <- setDT(lrt, keep.rownames = TRUE)[]
colnames(lrt)[1] = "ID"
lrt <- as.data.frame(lrt)
dataMetrics[[paste0(colnames(fit)[1], "_", colnames(fit)[2])]] <- lrt
str(dataMetrics, strict.width = "wrap")
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE)
ret[["S1_S3"]] + ggtitle("DEGs (FDR < 0.1)")
str(dataMetrics)
names(dataMetrics)
names(dataMetrics) <- "S3_S1"
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE)
ret[["S1_S3"]] + ggtitle("DEGs (FDR < 0.1)")
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3, lineColor = "magenta", saveFile = FALSE, hover = TRUE)
ret[["S1_S3"]] %>% layout(title="DEGs (FDR < 0.1)")
str(data_st)
str(dataMetrics)
dev.off()
dev.off()
library(bigPint)
library(dplyr)
library(ggplot2)
library(plotly)
data = data.frame(ID=paste0(replicate(2000, "ID"), 1:2000), PyLa.1 = runif(2000), PyLa.2 = runif(2000), PyLa.3 = runif(2000), Py.1 = runif(2000), Py.2 = runif(2000), Py.3 = runif(2000))
data$ID = as.character(data$ID)
data_st <- as.data.frame(t(apply(as.matrix(data[,-1]), 1, scale)))
data_st$ID <- as.character(data$ID)
data_st <- data_st[,c(length(data_st), 1:length(data_st)-1)]
colnames(data_st) <- colnames(data)
nID <- which(is.nan(data_st[,2]))
data_st[nID,2:length(data_st)] <- 0
ret <- plotPCP(data=data_st, saveFile = FALSE)
ret[["PyLa_Py"]]
ret <- plotSM(data=data, saveFile = FALSE)
ret[["PyLa_Py"]]
library(edgeR)
library(data.table)
rownames(data) = data[,1]
y = DGEList(counts=data[,-1])
group = c(1,1,1,2,2,2)
y = DGEList(counts=y, group=group)
Group = factor(c(rep("PyLa",3), rep("Py",3)))
design <- model.matrix(~0+Group, data=y$samples)
colnames(design) <- levels(Group)
y <- estimateDisp(y, design)
fit <- glmFit(y, design)
dataMetrics <- list()
dev.off()
rm(list=ls())
dev.off()
data = data.frame(ID=paste0(replicate(2000, "ID"), 1:2000), PyLa.1 = runif(2000), PyLa.2 = runif(2000), PyLa.3 = runif(2000), Py.1 = runif(2000), Py.2 = runif(2000), Py.3 = runif(2000))
data$ID = as.character(data$ID)
data_st <- as.data.frame(t(apply(as.matrix(data[,-1]), 1, scale)))
data_st$ID <- as.character(data$ID)
data_st <- data_st[,c(length(data_st), 1:length(data_st)-1)]
colnames(data_st) <- colnames(data)
nID <- which(is.nan(data_st[,2]))
data_st[nID,2:length(data_st)] <- 0
View(data_st)
ret <- plotPCP(data=data_st, saveFile = FALSE)
library(tidyverse)
library(RedditExtractoR)
links499 <- reddit_urls(search_terms = "president",
cn_threshold = 0, # minimum number of comments
page_threshold = 499,
sort_by = "comments",
wait_time = 2)
links499Com <- get_reddit(search_terms = "president",
cn_threshold = 0,
page_threshold = 499,
sort_by = "comments",
wait_time =2)
# Have the same number of unique titles
unique(links499$title)
# Have the same number of unique titles
length(unique(links499$title))
length(unique(links499Com$title))
# Both have minimum of 12378
min(links499Com$num_comments)
min(links499$num_comments)
links1000 <- reddit_urls(
search_terms = "president",
cn_threshold = 0, # minimum number of comments
page_threshold = 1000, # can probably get as many URLs as you want but you can only extract a certain amount of data at one time
sort_by = "comments",
wait_time = 2
)
links1000Com <- get_reddit(search_terms = "president",
cn_threshold = 0,
page_threshold = 1000,
sort_by = "comments",
wait_time =2 )
# Have the same number of unique titles (n=239)
length(unique(links1000$title))
length(unique(links1000Com$title))
# Both have minimum of 12378
min(links1000Com$num_comments)
min(links1000$num_comments)
library(bigPint)
install.packages("bigpint")
library(bigPint)
install.packages("bigPint")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("bigPint")
library(bigPint)
library(dplyr)
library(ggplot2)
library(plotly)
data("soybean_cn_sub")
data = soybean_cn_sub %>% select(ID, starts_with("S1"), starts_with("S3"))
data_st <- as.data.frame(t(apply(as.matrix(data[,-1]), 1, scale)))
data_st$ID <- as.character(data$ID)
data_st <- data_st[,c(length(data_st), 1:length(data_st)-1)]
colnames(data_st) <- colnames(data)
nID <- which(is.nan(data_st[,2]))
data_st[nID,2:length(data_st)] <- 0
library(edgeR)
BiocManager::install("edgeR")
library(data.table)
rownames(data) = data[,1]
y = DGEList(counts=data[,-1])
library(edgeR)
rownames(data) = data[,1]
y = DGEList(counts=data[,-1])
group = c(1,1,1,2,2,2)
y = DGEList(counts=y, group=group)
Group = factor(c(rep("S1",3), rep("S3",3)))
design <- model.matrix(~0+Group, data=y$samples)
colnames(design) <- levels(Group)
y <- estimateDisp(y, design)
fit <- glmFit(y, design)
dataMetrics <- list()
contrast=rep(0,ncol(fit))
contrast[1]=1
contrast[2]=-1
lrt <- glmLRT(fit, contrast=contrast)
lrt <- topTags(lrt, n = nrow(y[[1]]))[[1]]
lrt <- setDT(lrt, keep.rownames = TRUE)[]
colnames(lrt)[1] = "ID"
lrt <- as.data.frame(lrt)
dataMetrics[[paste0(colnames(fit)[1], "_", colnames(fit)[2])]] <- lrt
ret <- plotPCP(data_st, dataMetrics, threshVal = 0.1, lineSize = 0.3,
lineColor = "magenta", saveFile = FALSE)
ret[["S1_S3"]] + ggtitle("DEGs (FDR < 0.1)")
ret[["S1_S3"]] + ggtitle("DEGs (FDR < 0.1)") +theme_void()
setwd("~/mdrs228.github.io")
