library(ggplot2)
island = get_map(location = c(lon = -63.247593, lat = 17.631598), zoom = 13, maptype = "satellite")
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
browseVignettes("Sushi")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Sushi", version = "3.8")
browseVignettes("Sushi")
testScatter <- read.csv("~/Desktop/Projects/VirusHackathon/testScatter.csv")
View(testScatter)
rm(testScatter)
dat <- read.csv("~/Desktop/Projects/VirusHackathon/testScatter.csv")
str(dat)
ggplotly(dat)
library(ggplot2)
library(plotly)
g <- ggplot(dat)
g
dat
ggplot(dat) + geom_point()
g <- ggplot(dat, aes(x=OrfCoverage, y=VIGACoverage)) + geom_point()
g
ggplotly(g)
dev.off()
rm(list=ls())
dev.off()
dat <- read.csv("~/Desktop/Projects/VirusHackathon/testScatter.csv")
g <- ggplot(dat, aes(x=OrfCoverage, y=VIGACoverage)) + geom_point()
ggplotly(g)
str(dat)
rm(list=ls())
dev.off()
dev.off()
dat <- read.csv("~/Desktop/Projects/VirusHackathon/testScatter.csv")
g <- ggplot(dat, aes(x=OrfCoverage, y=VIGACoverage)) + geom_point()
ggplotly(g)
ContigLengths <- read.csv("~/Desktop/Projects/VirusHackathon/ContigLengths/ContigLengths.csv")
View(ContigLengths)
dat <- read.csv("~/Desktop/Projects/VirusHackathon/ContigLengths/ContigLengths.csv")
str(dat)
View(dat)
names(dat) <- c("Contig", "Length", "Group")
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + geom_bar(position = "dodge")
str(dat)
summary(dat$Length)
ggplot(df, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge')
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge')
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', binwidth=100)
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', binwidth=10)
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', binwidth=30)
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=300)
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=3)
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=10)
dev.off()
dat <- read.csv("~/Desktop/Projects/VirusHackathon/ContigLengths/ContigLengths.csv")
names(dat) <- c("Contig", "Length", "Group")
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=10)
rm(list=ls())
dev.off()
dev.off()
dat <- read.csv("~/Desktop/Projects/VirusHackathon/ContigLengths/ContigLengths.csv")
names(dat) <- c("Contig", "Length", "Group")
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=10)
dat <- read.csv("~/Desktop/Projects/VirusHackathon/ContigLengths.csv")
names(dat) <- c("Contig", "Length", "Group")
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=10)
g <- ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=10)
ggplotly(g)
g <- ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=5)
g
dev.off()
ggplot(dat, aes(fill=Group, y=Group, x=Length)) +
geom_bar( stat="identity")
g <- ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='identity', bins=5)
g
g <- ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='identity', bins=10)
g
ggplotly(g)
g <- ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='identity', bins=50)
g
head(dat)
summary(dat$KU)
library(dplyr)
dat %>% filter(Group=="U")
kuDat <- dat %>% filter(Group=="KU")
nrow(uDat)
uDat <- dat %>% filter(Group=="U")
kuDat <- dat %>% filter(Group=="KU")
nrow(uDat)
nrow(kuDat)
summary(uDat$Length)
summary(kuDat$Length)
setwd("~/VisualizationMethods/ReproducibleFigures")
library(bigPint)
load("data/kidneyLiver.rda")
dat <- data
dat <- dat[,1:7]
dat[,-1] <- log(dat[,-1]+1)
load("data/add1_metrics.rda")
app <- plotLitreApp(data = dat, dataMetrics = metrics, pointColor = '#FF34B3')
if (interactive()) {
shiny::runApp(app, port = 1234, launch.browser = TRUE)
}
citation("bigPint")
??stats
??hclust
??cutree
library(bigPint)
data("soybean_cn_sub")
soybean_cn_sub <- soybean_cn_sub[,1:7]
app <- plotSMApp(data=soybean_cn_sub)
if (interactive()) {
shiny::runApp(app)
}
library(bigPint)
data("soybean_cn_sub")
soybean_cn_sub <- soybean_cn_sub[,c(1,2,3,5,6)]
app <- plotSMApp(data=soybean_cn_sub)
if (interactive()) {
shiny::runApp(app)
}
RVersion()
R_Version()
R.Version()
install.packages("ggenealogy")
packageVersion("ggenealogy")
## Load and examine the structure of the example soybean genealogy
## dataset (called sbGeneal)
library("ggenealogy")
library("dplyr")
data("sbGeneal", package = "ggenealogy")
str(sbGeneal)
## Load and examine the structure of the example academic statistician
## genealogy dataset (called statGeneal)
data("statGeneal", package = "ggenealogy")
dim(statGeneal)
colnames(statGeneal)
## Remove blank parent rows for calculations
statGenealEP <- statGeneal %>% filter(parent != "")
statIG <- dfToIG(statGenealEP)
## Unique indivudals in the statistician dataset
uCP <- na.omit(c(statGeneal$child, statGeneal$parent))
length(unique(uCP[uCP != ""]))
## Unique children and parents in the statistician dataset
uChild <- unique(na.omit(statGeneal$child))
uParent <- unique(na.omit(statGeneal$parent))
nrow(na.omit(summarise(group_by(statGeneal,child))))
nrow(na.omit(summarise(group_by(statGeneal,parent))))
## Number of parents per child in the statistician dataset
table(summarise(group_by(statGenealEP,child), cPC = sum(!is.na(parent)))$cPC)
## Number of unique parent-chlid relationships in the statistician dataset
getBasicStatistics(statIG)$numEdges
## Convert our example soybean genealogy dataset (called sbGeneal)
## into an igraph object:
sbIG <- dfToIG(sbGeneal)
sbIG
## Obtain basic summary statistics about the igraph object
getBasicStatistics(sbIG)
## Determine shortest path of parent-child relationships between two
## labels of interest ("Tokyo" and "Narow")
pathTN <- getPath("Tokyo", "Narow", sbIG, sbGeneal, "devYear")
pathTN
## Plot returned path
plotPath(pathTN, sbGeneal, "devYear")
## Do the same for a different pair of two labels of interest
## ("Bedford" and "Zane"). First, we can determine the years these two
## labels were identified
getVariable("Bedford", sbGeneal, "devYear")
getVariable("Zane", sbGeneal, "devYear")
## Next, we can determine the shortest path of parent-child
## relationships between these two labels of interest and plot it.
pathBZ <- getPath("Bedford", "Zane", sbIG, sbGeneal, "devYear")
plotPath(pathBZ, sbGeneal, "devYear", fontFace = 2) + ggplot2::xlab("Development Year")
## Here, we demonstrate plotting paths on a filtered dataset, where
## all observations contain a non-NA value for yield. We show one
## example where there is one variable plotted for the path (yield)
## and another example where there are two variables plotted for the
## path (yield and devYear)
sbFilt <- sbGeneal[complete.cases(sbGeneal[1:3]), ]
sbFiltIG <- dfToIG(sbFilt)
pathCL <- getPath("Clark", "Lawrence", sbFiltIG, sbFilt, "yield")
plotPath(pathCL, sbFilt, "yield") + ggplot2::xlab("Yield")
pathCL2 <- getPath("Clark", "Lawrence", sbFiltIG, sbFilt, "devYear")
plotPath(pathCL2, sbFilt, "devYear", "yield") + ggplot2::xlab("Development Year") + ggplot2::ylab("Yield")
## In the previous section, we obtained the shortest path between the
## the pair of labels "Tokyo" and "Narow" and saved it as a variable
## pathTN. Here, we can plot that path superimposed over all labels in
## the example soybean genealogy dataset.
plotPathOnAll(pathTN, sbGeneal, sbIG, "devYear", bin = 3, pathEdgeCol = "red", nodeSize = 2.5, pathNodeSize = 4) +
ggplot2::theme(axis.text = ggplot2::element_text(size = 12), axis.title = ggplot2::element_text(size = 12))
## We can repeat this process, only now instead of setting the bin
## variable to 1:3 (as we did earlier), we can set it to 1:6.
plotPathOnAll(pathTN, sbGeneal, sbIG, "devYear", bin = 6, pathEdgeCol = "seagreen2", nodeSize = 1, pathNodeSize = 3) +
ggplot2::xlab("Development Year")
## We now plot the path across all values in the filtered data
## frame. We again demonstrate this plotting tool with one variable
## plotted for the path (yield) and another example where there are
## two variables plotted for the path (yield and devYear)
plotPathOnAll(pathCL, sbFilt, sbFiltIG, "yield", bin = 3, pathEdgeCol = "purple") + ggplot2::xlab("Yield")
plotPathOnAll(pathCL, sbFilt, sbFiltIG, "yield", "devYear", pathEdgeCol = "orange") + ggplot2::xlab("Yield") + ggplot2::ylab("Development Year")
## As is explained in the article, only the top part of Figure 6 (the
## figure from this section) is produced by ggenealogy code. In
## contrast, the bottom part of Figure 6 was produced by tools outside
## of ggenealogy for didactic purposes. Below, we recreate the top
## part of Figure 6, which was to generate a plot of the ancestors and
## descendants of the label Lee.
plotAncDes("Lee", sbGeneal, mAnc = 6, mDes = 6, vCol = "blue")
## We can plot the distance matrix for a set of 10 varieties.
varieties <- c("Brim", "Bedford", "Calland", "Dillon", "Hood", "Narow", "Pella", "Tokyo", "Young", "Zane")
plotDegMatrix(varieties, sbIG, sbGeneal) +
ggplot2::scale_fill_continuous(low = "white", high = "darkgreen") +
ggplot2::theme(legend.title = ggplot2::element_text(size = 15), legend.text = ggplot2::element_text(size = 15)) +
ggplot2::labs(x = "Variety", y = "Variety")
## We can now explore some of the plotting functions in ggenealogy,
## only now with the academic statistican genealogy dataset. This
## second example dataset is much larger than the first example
## dataset of soybean genealogy. For example purposes, we would like
## to view the ancestor and descendant plot for the individual who has
## the largest number of descendants. To identify the name of this
## individual, we run the following code:
library("dplyr")
indVec <- getNodes(statGeneal)
indVec <- indVec[which(indVec != "", )]
dFunc <- function(var) nrow(getDescendants(var, statGeneal, gen = 100))
numDesc <- sapply(indVec, dFunc)
table(numDesc)
which(numDesc == 159)
## We see the individual with the largest number of descendants is Sir
## David Cox, who has 159 descendants. Now, we can plot the
## "ancestors" and "descendants" of Sir David Cox.
plotAncDes("David Cox", statGeneal, mAnc = 6, mDes = 6, vCol = "blue")
## It seems that of the 42 "children" of Sir David Cox, the one who
## went on to have the largest number of "children" of his own was
## Peter Bloomfield. We can verify below that Peter Bloomfield had 26
## "children" and 49 "descendants".
length(getChild("Peter Bloomfield", statGeneal))
nrow(getDescendants("Peter Bloomfield", statGeneal, gen = 100))
## It would be of interest now to examine the shortest path between
## Sir David Cox and one of his newest "descendants" Petra Buzkova. To
## do so, we first need to obtain the corresponding igraph object of
## the example academic statistican genealogy dataset.
statIG <- dfToIG(statGeneal)
pathCB <- getPath("David Cox", "Petra Buzkova", statIG, statGeneal, "gradYear", isDirected = FALSE)
## After doing so, we can now determine the shortest path between Sir
## David Cox and Petra Buzkova, and plot it.
plotPath(pathCB, statGeneal, "gradYear", fontFace = 4) +
ggplot2::xlab("Graduation Year") +
ggplot2::theme(axis.text = ggplot2::element_text(size = 10), axis.title = ggplot2::element_text(size = 10)) +
ggplot2::scale_x_continuous(expand = c(.1, .2))
## We can now superimpose this shortest path between Sir David Cox and
## Petra Buzkova across the entire genealogical structure.
plotPathOnAll(pathCB, statGeneal, statIG, "gradYear", bin = 200) +
ggplot2::theme(axis.text = ggplot2::element_text(size = 8), axis.title = ggplot2::element_text(size = 8)) +
ggplot2::scale_x_continuous(expand = c(.1, .2)) +
ggplot2::xlab("Graduation Year")
## We notice, however, that we cannot read the text of the nodes on
## the path of interest. To solve this problem, we can create the same
## plot, only now specifying that any nodes that are not on our path
## of interest are deemphasized with smaller text.
plotPathOnAll(pathCB, statGeneal, statIG, "gradYear", bin = 200, nodeSize = .5, pathNodeSize = 2.5, nodeCol = "darkgray", edgeCol = "lightgray") +
ggplot2::theme(axis.text = ggplot2::element_text(size = 8), axis.title = ggplot2::element_text(size = 8)) +
ggplot2::scale_x_continuous(expand = c(.1, .2)) +
ggplot2::xlab("Graduation Year")
## Even though we can now read the text labels on the path of
## interest, we lost the ability to read labels that are not on our
## path of interest. At this point, we can keep the best of both
## worlds: We can create a plot that demphasizes the nodes that are
## not on the path of interest by assigning them small text font size,
## but incoroporate an interactive function so that we can hover over
## these non-path nodes if we wish to obtain their label
## information. This is the plot we used and interacted with to create
## the video embedded in Figure 12.
plotPathOnAll(pathCB, statGeneal, statIG, "gradYear", bin = 200, nodeSize = .5, pathNodeSize = 2.5, nodeCol = "darkgray", edgeCol = "lightgray", animate = TRUE)
## Here, we plot the filtered data frame of the soy bean data with one
## and two variables, respectively, when the animation is turned on.
plotPathOnAll(pathCL, sbFilt, sbFiltIG, "yield", pathEdgeCol = "orange", animate = TRUE)
try(plotPathOnAll(pathCL, sbFilt, sbFiltIG, "yield", "devYear", pathEdgeCol = "orange", animate = TRUE))
## We can demonstrate the getBranchQuant() function by examining the
## quantitative variable ``yield" across the descendant branches of
## the soybean variety A.K.
AKBranchYield <- getBranchQuant("A.K.", sbGeneal, "yield", 15)
select(AKBranchYield, -DesNames)
## We can examine the mean graduation year for the ``descendant"
## branches of the academic statistician David Cox
CoxBranchYear <- getBranchQuant("David Cox", statGeneal, "gradYear", 15)
head(select(CoxBranchYear, -DesNames), 10)
## We can demonstrate the getBranchQual() function by examining the
## qualitative variable ``thesis" across the ``descendant" branches of
## the academic statistician David Cox
v1 <- "David Cox"; geneal <- statGeneal; colName <- "thesis"; gen <- 15
rExpr <- "grepl('(?i)Stochastic', geneal$colName)"
CoxBranchStochastic <- getBranchQual(v1, geneal, colName, rExpr, gen)
head(select(CoxBranchStochastic, -DesNames))
## It may be interesting to examine the school that is represented the
## most among all descendants of David Cox. Below, we determine what
## school this is.
desDC <- getDescendants("David Cox", statGeneal, 15)
tableDC <- table(statGeneal[match(desDC$label, statGeneal$child), ]$school)
tail(sort(tableDC), 5)
## We can now determine which of the branches from the 42 ``children"
## of David Cox have the largest proportion of ``descendants"
## graduating from the University of London.
colName <- "school"
rExpr <- "geneal$colName == 'University of London'"
DCBranchUL <- getBranchQual(v1, geneal, colName, rExpr, gen)
head(select(DCBranchUL, -DesNames))
## We show that 34 of the ``descendants" of David Cox that graduated
## from the University of London were direct ``children" of him
DCChild <- statGeneal[match(getChild("David Cox", statGeneal), statGeneal$child), ]
sum(DCChild$school == "University of London")
dev.off()
dev.off()
## Remove blank parent rows for calculations
statGenealEP <- statGeneal %>% filter(parent != "")
statIG <- dfToIG(statGenealEP)
## Unique indivudals in the statistician dataset
uCP <- na.omit(c(statGeneal$child, statGeneal$parent))
length(unique(uCP[uCP != ""]))
## Unique children and parents in the statistician dataset
uChild <- unique(na.omit(statGeneal$child))
uParent <- unique(na.omit(statGeneal$parent))
nrow(na.omit(summarise(group_by(statGeneal,child))))
nrow(na.omit(summarise(group_by(statGeneal,parent))))
## Number of unique parent-chlid relationships in the statistician dataset
getBasicStatistics(statIG)$numEdges
install.packages("BiocManager")
BiocManager::install("schex")
install.packages("BiocManager")
BiocManager::install("schex")
install.packages("BiocManager")
BiocManager::install("schex")
r.version()
R.Version()
library(shiny)
library(Seurat)
library(ggrepel)
library(shinydashboard)
library(schex)
library(iSEE)
devtools::install_github("SaskiaFreytag/schex")
install.packages("data.table")
install.packages("data.table")
devtools::install_github("SaskiaFreytag/schex")
library(data.table)
devtools::install_github("SaskiaFreytag/schex")
BiocManager::install("SingleCellExperiment")
library(SingleCellExperiment)
devtools::install_github("SaskiaFreytag/schex")
devtools::install_github("SaskiaFreytag/schex")
devtools::install_github("SaskiaFreytag/schex")
BiocManager::install(ask=FALSE)
devtools::install_github("SaskiaFreytag/schex")
BiocManager::install(ask=FALSE)
remove.packages("data.table")
install.packages("data.table", type = "source",
repos = "https://Rdatatable.gitlab.io/data.table")
install.packages("data.table", type = "source", repos = "https://Rdatatable.gitlab.io/data.table")
remove.packages("data.table")
install.packages("data.table")
remove.packages("data.table")
install.packages("data.table")
BiocManager::install(ask=FALSE)
devtools::install_github("SaskiaFreytag/schex")
BiocManager::install("SingleCellExperiment")
R.Version(SingleCellExperiment)
R.Version("SingleCellExperiment")
library(SingleCellExperiment)
devtools::install_github("SaskiaFreytag/schex")
remove.packages("SingleCellExperiment")
BiocManager::install("SingleCellExperiment")
devtools::install_github("SaskiaFreytag/schex")
source("https://bioconductor.org/biocLite.R")
biocLite()
source('http://bioconductor.org/biocLite.R')
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c("SingleCellExperiment"))
library(SingleCellExperiment)
package_version(SingleCellExperiment)
devtools::install_github("SaskiaFreytag/schex")
BiocManager::install(c("SingleCellExperiment"))
devtools::install_github("SaskiaFreytag/schex")
source("https://bioconductor.org/biocLite.R")
remove.packages("SingleCellExperiment")
remove.packages("SingleCellExperiment")
source("https://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
sessionInfo()
devtools::install_github("SaskiaFreytag/schex")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("https://bioconductor.org/biocLite.R")
chooseCRANmirror()
install.packages("BiocManager")
install.packages("BiocManager")
library(BiocManager)
remove.packages("SingleCellExperiment")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
sessionInfo()
devtools::install_github("SaskiaFreytag/schex")
R.version()
r_version()
R_version()
R_Version()
BiocManager::install(version='devel')
devtools::install_github("SaskiaFreytag/schex")
BiocManager::install(version='devel')
library(SingleCellExperiment)
devtools::install_github("SaskiaFreytag/schex")
devtools::install_github("SaskiaFreytag/schex")
sessionInfo()
BiocManager::install("schex")
sessionInfo()
getwd()
Sample2="CAAGCTTTTAAGAGCAAATGGTGGATGCCTTGGCAAAGAGAGGCGATGAAGGACGTACTAGACTGCGATAAGCTACGCGGAGCTGTCAAGGAGCTTTGATGCGTAGATGTCCGAATGGGGCAACCCAACTAATGGAGACATTAGTTACTCATTTATGAGAGCGAACCTAGGGAAGTGAAACATCTCAGTACCTAGAGGAAAAGAAATCAACGAGATTCCCTTAGTAGTGGCGAGCGAAAGGGGAAAAGGGCAAACCGAATGCTTGCATTCGGGGTTGAGGACTGCAACATCCAAGAGAACGCTTTAGCAGAGTTACCTGGAAAGGTAAGCCATAGAAGGTGATAGCCCTGTAAGCGAAAAGGCGTTCTTAGGTAGCAGTATCCAGAGTAGGCCAGGACACGTGAAATCCGGGCTGAAGCCGGGGAGACCACTCTCCAACCCTAAATACTACTCTTTGACCGATAGCGAACAAGTACCGTGAGGGAAAGGTGAAAAGAACCGCAGTGAGCGGAGTGAAATAGAACCTGAAACCATTTGCTTACAATCATTCAGAGCCCTATGATTTATCAGGGTGATGGACTGCCTTTTGCATAATGATCCTGCGAGTTGTGGTATCTGGCAAGGTTAAGCCAAGTGCGAAGCCGTAGCGAAAGCGAGTCTTAATAGGGCGATTAGTCAGATGCTGCAGACCCGAAGCTAAGTGATCTATCCATGGCCAAGTTGAAACGAGTGTAATAGCTCGTGGAGGACTGAACTCGTACCCATTGAAACGGGTTGGGATGAGCTGTGGATAGGGGTGAAAGGCCAAACAAACTTAGTGATAGCTGGTTCTCTTCGAAATATATTTAGGTATAGCCTCAAGTGATAGTAAAAGGGGGTAGAGCTCTGATTGGGCTAGGGCTGCTCGCCGCGGTACCAAACCCTATCAAACTTCGAATACCTTTTACCGTATCTTGGGAGTCAGGCGGTGGGTGATAAAATCAATCGTCAAAAGGGGAACAACCCAGACTGGCAAATAAGGTCCCTAAGTTCTATTCTGAGTGGAAAAAGATGTGTGGCTACTCAAACAACCAGGAGGTTGGCTTAGAAGCAGCCATCCTTTAAAGAAAGCGTAACAGCTCACTGGTCTAGTGGTCATGCGCTGAAAATATAACGGGGCTAAGATAGACACCGAATTTCCAGATTGTGCTGATGCACAGTGGTAGAAGAGCGTTCGCAACAGCGTTGAAGGTATACCGGTAAGGAGTGCTGGAGCGTTGCGAAGTGAGCATGCAGGAATGAGTAGCGATAAGATACATGAGAATTGTATCCGCCGTAAATCTAAGGTTTCCTACGCGATGTTCGTCATCGTAGGGTTAGTCGGGTCCTAAGTCGAGTCCGAAAGGGGTAGACGATGGCAAATGGGTTAATATTCCCATACCGACTATGGAGCGTGATGGGGGGACGCATAGGGTTAAGCGAGCTAGCTGATGGAAGTGCTAGTCGAAAGGCGTAGATTGGAGGGAAGGCAAATCCACCTCTGTATTCGAAACCTAACAGGCTCTCTGAGTCCTTCGGGACAAAGGGAGAATCGCTGATACCGTCGTGCCAAGAAAAGCCTCTAAGCATATCCATGGTCGTCCGTACCGCAAACCGACACAGGTAGATGGGATGAGTATTCTAAGGCGCGTGAAAGAACTCTGGTTAAGGAACTCTGCAAACTAGCACCGTAAGTTCGCGATAAGGTGTGCCTACGAAAGTAGGTCTCAGCAAAGAGTCCCTCCCGACTGTTTACCAAAAACACAGCACTTTGCCAACTCGTAAGAGGAAGTATAAGGTGTGACGCCTGCCCGGTGCTCGAAGGTTAAGAGGATGCGTCAGTCGCAAGATGAAGCGTTGAATTGAAGCCCGAGTAAACGGCGGCCGTAACTATAACGGTCCTAAGGTAGCGAAATTCCTTGTCGGTTAAATACCGACCTGCATGAATGGCGTAACGAGATGGGAGCTGTCTCAACCAGAGATTCAGTGAAATTGTAGTGGAGGTGAAAATTCCTCCTACCCGCGGCAAGACGGAAAGACCCCGTGGACCTTTACTACAGCTTAGCACTGCTAATGGGAATATCATGCGCAGGATAGGTGGGAGGCTTTGAAGTGAGTGCTTTGGTGCTCATGGAGCCACCCTTGAGATACCACCCTTGATGTTTCTGTTAGCTAACTGGCCTGTGTTATCCACAGGCAGGACAATGCTTGGTGGGTAGTTTGACTGGGGCGGTCGCCTCCTAAAAAGTAACGGAGGCTTGCAAAGGTTGGCTCATTGCGGTTGGAAATCGCAAGTTGAGTGTAATGGCACAAGCCAGCCTGACTGTGAGACATACAAGTCGAGCAGAGACGAAAGTCGGTCATAGTGATCCGGTGGTTCTGTGTGGAAGGGCCATCGCTCAAAGGATAAAAGGTACCCCGGGGATAACAGGCTGATCTCCCCCAAGAGCTCACATCGACGGGGAGGTTTGGCACCTCGATGTCGGCTCATCGCATCCTGGGGCTGGAGCAGGTCCCAAGGGTATGGCTGTTCGCCATTTAAAGCGGTACGCGAGCTGGGTTCAGAACGTCGTGAGACAGTTCGGTCCCTATCTGCCGTGGGCGTAGGAAAGCTGAGGAGAGCTGTCCCTAGTACGAGAGGACCGGGATGGACGTGTCACTGGTGCACCAGTTGTTCTGCCAAGAGCATCGCTGGGTAGCTACACACGGATGTGATAACTGCTGAAAGCATCTAAGCAGGAAGCCAACTCCAAGATAAGCTTTCCCTGAAGGTCGCAAGAAGACTACTTGCTTGATAGGGTAGATGTGTAAGCGCAGTAATGCGTTTAGCTGACTACTACTAATAGACCGTTTGGCTTGTTTT"
Sample3="CAAGCTTTTAAGAGCAAATGGTGGATGCCTTGGCAAAGAGAGGCGATGAAGGACGTACTAGACTGCGATAAGCTACGCGGAGCTGTCAAGGAGCTTTGATGCGTAGATGTCCGAATGGGGCAACCCAACTAATGGAGACATTAGTTACTCATTTATGAGAGCGAACCTAGGGAAGTGAAACATCTCAGTACCTAGAGGAAAAGAAATCAACGAGATTCCCTTAGTAGTGGCGAGCGAAAGGGGAAAAGGGCAAACCGAATGCTTGCATTCGGGGTTGAGGACTGCAACATCCAAGAGAACGCTTTAGCAGAGTTACCTGGAAAGGTAAGCCATAGAAGGTGATAGCCCTGTAAGCGAAAAGGCGTTCTTAGGTAGCAGTATCCAGAGTAGGCCAGGACACGTGAAATCCGGGCTGAAGCCGGGGAGACCACTCTCCAACCCTAAATACTACTCTTTGACCGATAGCGAACAAGTACCGTGAGGGAAAGGTGAAAAGAACCGCAGTGAGCGGAGTGAAATAGAACCTGAAACCATTTGCTTACAATCATTCAGAGCCCTATGATTTATCAGGGTGATGGACTGCCTTTTGCATAATGATCCTGCGAGTTGTGGTATCTGGCAAGGTTAAGCCAAGTGCGAAGCCGTAGCGAAAGCGAGTCTTAATAGGGCGATTAGTCAGATGCTGCAGACCCGAAGCTAAGTGATCTATCCATGGCCAAGTTGAAACGCGTGTAATAGCTCGTGGAGGACTGAACTCGTACCCATTGAAACGGGTTGGGATGAGCTGTGGATAGGGGTGAAAGGCCAAACAAACTTAGTGATAGCTGGTTCTCTTCGAAATATATTTAGGTATAGCCTCAAGTGATAGTAAAAGGGGGTAGAGCTCTGATTGGGCTAGGGCTGCTCGCCGCGGTACCAAACCCTATCAAACTTCGAATACCTTTTACCGTATCTTGGGAGTCAGGCGGTGGGTGATAAAATCAATCGTCAAAAGGGGAACAACCCAGACTGGCAAATAAGGTCCCTAAGTTCTATTCTGAGTGGAAAAAGATGTGTGGCTACTCAAACAACCAGGAGGTTGGCTTAGAAGCAGCCATCCTTTAAAGAAAGCGTAACAGCTCACTGGTCTAGTGGTCATGCGCTGAAAATATAACGGGGCTAAGATAGACACCGAATTTCCAGATTGTGCTGATGCACAGTGGTAGAAGAGCGTTCGCAACAGCGTTGAAGGTATACCGGTAAGGAGTGCTGGAGCGTTGCGAAGTGAGCATGCAGGAATGAGTAGCGATAAGATACATGAGAATTGTATCCGCCGTAAATCTAAGGTTTCCTACGCGATGTTCGTCATCGTAGGGTTAGTCGGGTCCTAAGTCGAGTCCGAAAGGGGTAGACGATGGCAAATGGGTTAATATTCCCATACCGACTATGGAGCGTGATGGGGGGACGCATAGGGTTAAGCGAGCTAGCTGATGGAAGTGCTAGTCGAAAGGCGTAGATTGGAGGGAAGGCAAATCCACCTCTGTATTCGAAACCTAACAGGCTCTCTGAGTCCTTCGGGACAAAGGGAGAATCGCTGATACCGTCGTGCCAAGAAAAGCCTCTAAGCATATCCATGGTCGTCCGTACCGCAAACCGACACAGGTAGATGGGATGAGTATTCTAAGGCGCGTGAAAGAACTCTGGTTAAGGAACTCTGCAAACTAGCACCGTAAGTTCGCGATAAGGTGTGCCTACGAAAGTAGGTCTCAGCAAAGAGTCCCTCCCGACTGTTTACCAAAAACACAGCACTTTGCCAACTCGTAAGAGGAAGTATAAGGTGTGACGCCTGCCCGGTGCTCGAAGGTTAAGAGGATGCGTCAGTCGCAAGATGAAGCGTTGAATTGAAGCCCGAGTAAACGGCGGCCGTAACTATAACGGTCCTAAGGTAGCGAAATTCCTTGTCGGTTAAATACCGACCTGCATGAATGGCGTAACGAGATGGGAGCTGTCTCAACCAGAGATTCAGTGAAATTGTAGTGGAGGTGAAAATTCCTCCTACCCGCGGCAAGACGGAAAGACCCCGTGGACCTTTACTACAGCTTAGCACTGCTAATGGGAATATCATGCGCAGGATAGGTGGGAGGCTTTGAAGTGAGTGCTTTGGTGCTCATGGAGCCACCCTTGAGATACCACCCTTGATGTTTCTGTTAGCTAACTGGCCTGTGTTATCCACAGGCAGGACAATGCTTGGTGGGTAGTTTGACTGGGGCGGTCGCCTCCTAAAAAGTAACGGAGGCTTGCAAAGGTTGGCTCATTGCGGTTGGAAATCGCAAGTTGAGTGTAATGGCACAAGCCAGCCTGACTGTGAGACATACAAGTCGAGCAGAGACGAAAGTCGGTCATAGTGATCCGGTGGTTCTGTGTGGAAGGGCCATCGCTCAAAGGATAAAAGGTACCCCGGGGATAACAGGCTGATCTCCCCCAAGAGCTCACATCGACGGGGAGGTTTGGCACCTCGATGTCGGCTCATCGCATCCTGGGGCTGGAGCAGGTCCCAAGGGTATGGCTGTTCGCCATTTAAAGCGGTACGCGAGCTGGGTTCAGAACGTCGTGAGACAGTTCGGTCCCTATCTGCCGTGGGCGTAGGAAAGCTGAGGAGAGCTGTCCCTAGTACGAGAGGACCGGGATGGACGTGTCACTGGTGCACCAGTTGTTCTGCCAAGAGCATCGCTGGGTAGCTACACACGGATGTGATAACTGCTGAAAGCATCTAAGCAGGAAGCCAACTCCAAGATAAGCTTTCCCTGAAGGTCGCAAGAAGACTACTTGCTTGATAGGGTAGATGTGTAAGCGCAGTAATGCGTTTAGCTGACTACTACTAATAGACCGTTTGGCTTGTTTT"
Sample4="CAAGCTTTTAAGAGCAAATGGTGGATGCCTTGGCAAAGAGAGGCGATGAAGGACGTACTAGACTGCGATAAGCTACGCGGAGCTGTCAAGGAGCTTTGATGCGTAGATGTCCGAATGGGGCAACCCAACTAATGGAGACATTAGTTACTCATTTATGAGAGCGAACCTAGGGAAGTGAAACATCTCAGTACCTAGAGGAAAAGAAATCAACGAGATTCCCTTAGTAGTGGCGAGCGAAAGGGGAAAAGGGCAAACCGAATGCTTGCATTCGGGGTTGAGGACTGCAACATCCAAGAGAACGCTTTAGCAGAGTTACCTGGAAAGGTAAGCCATAGAAGGTGATAGCCCTGTAAGCGAAAAGGCGTTCTTAGGTAGCAGTATCCAGAGTAGGCCAGGACACGTGAAATCCGGGCTGAAGCCGGGGAGACCACTCTCCAACCCTAAATACTACTCTTTGACCGATAGCGAACAAGTACCGTGAGGGAAAGGTGAAAAGAACCGCAGTGAGCGGAGTGAAATAGAACCTGAAACCATTTGCTTACAATCATTCAGAGCCCTATGATTTATCAGGGTGATGGACTGCCTTTTGCATAATGATCCTGCGAGTTGTGGTATCTGGCAAGGTTAAGCCAAGTGCGAAGCCGTAGCGAAAGCGAGTCTTAATAGGGCGATTAGTCAGATGCTGCAGACCCGAAGCTAAGTGATCTATCCATGGCCAAGTTGAAACGCGTGTAATAGCTCGTGGAGGACTGAACTCGTACCCATTGAAACGGGTTGGGATGAGCTGTGGATAGGGGTGAAAGGCCAAACAAACTTAGTGATAGCTGGTTCTCTTCGAAATATATTTAGGTATAGCCTCAAGTGATAGTAAAAGGGGGTAGAGCTCTGATTGGGCTAGGGCTGCTCGCCGCGGTACCAAACCCTATCAAACTTCGAATACCTTTTACCGTATCTTGGGAGTCAGGCGGTGGGTGATAAAATCAATCGTCAAAAGGGGAACAACCCAGACTGGCAAATAAGGTCCCTAAGTTCTATTCTGAGTGGAAAAAGATGTGTGGCTACTCAAACAACCAGGAGGTTGGCTTAGAAGCAGCCATCCTTTAAAGAAAGCGTAACAGCTCACTGGTCTAGTGGTCATGCGCTGAAAATATAACGGGGCTAAGATAGACACCGAATTTCCAGATTGTGCTGATGCACAGTGGTAGAAGAGCGTTCGCAACAGCGTTGAAGGTATACCGGTAAGGAGTGCTGGAGCGTTGCGAAGTGAGCATGCAGGAATGAGTAGCGATAAGATACATGAGAATTGTATCCGCCGTAAATCTAAGGTTTCCTACGCGATGTTCGTCATCGTAGGGTTAGTCGGGTCCTAAGTCGAGTCCGAAAGGGGTAGACGATGGCAAATGGGTTAATATTCCCATACCGACTATGGAGCGTGATGGGGGGACGCATAGGGTTAAGCGAGCTAGCTGATGGAAGTGCTAGTCGAAAGGCGTAGATTGGAGGGAAGGCAAATCCACCTCTGTATTCGAAACCTAACAGGCTCTCTGAGTCCTTCGGGACAAAGGGAGAATCGCTGATACCGTCGTGCCAAGAAAAGCCTCTAAGCATATCCATGGTCGTCCGTACCGCAAACCGACACAGGTAGATGGGATGAGTATTCTAAGGCGCGTGAAAGAACTCTGGTTAAGGAACTCTGCAAACTAGCACCGTAAGTTCGCGATAAGGTGTGCCTACGAAAGTAGGTCTCAGCAAAGAGTCCCTCCCGACTGTTTACCAAAAACACAGCACTTTGCCAACTCGTAAGAGGAAGTATAAGGTGTGACGCCTGCCCGGTGCTCGAAGGTTAAGAGGATGCGTCAGTCGCAAGATGAAGCGTTGAATTGAAGCCCGAGTAAACGGCGGCCGTAACTATAACGGTCCTAAGGTAGCGAAATTCCTTGTCGGTTAAATACCGACCTGCATGAATGGCGTAACGAGATGGGAGCTGTCTCAACCAGAGATTCAGTGAAATTGTAGTGGAGGTGAAAATTCCTCCTACCCGCGGCAAGACGGAAAGACCCCGTGGACCTTTACTACAGCTTAGCACTGCTAATGGGAATATCATGCGCAGGATAGGTGGGAGGCTTTGAAGTGAGTGCTTTGGTGCTCATGGAGCCACCCTTGAGATACCACCCTTGATGTTTCTGTTAGCTAACTGGCCTGTGTTATCCACAGGCAGGACAATGCTTGGTGGGTAGTTTGACTGGGGCGGTCGCCTCCTAAAAAGTAACGGAGGCTTGCAAAGGTTGGCTCATTGCGGTTGGAAATCGCAAGTTGAGTGTAATGGCACAAGCCAGCCTGACTGTGAGACATACAAGTCGAGCAGAGACGAAAGTCGGTCATAGTGATCCGGTGGTTCTGTGTGGAAGGGCCATCGCTCAAAGGATAAAAGGTACCCCGGGGATAACAGGCTGATCTCCCCCAAGAGCTCACATCGACGGGGAGGTTTGGCACCTCGATGTCGGCTCATCGCATCCTGGGGCTGGAGCAGGTCCCAAGGGTATGGCTGTTCGCCATTTAAAGCGGTACGCGAGCTGGGTTCAGAACGTCGTGAGACAGTTCGGTCCCTATCTGCCGTGGGCGTAGGAAAGCTGAGGAGAGCTGTCCCTAGTACGAGAGGACCGGGATGGACGTGTCACTGGTGCACCAGTTGTTCTGCCAAGAGCATCGCTGGGTAGCTACACACGGATGTGATAACTGCTGAAAGCATCTAAGCAGGAAGCCAACTCCAAGATAAGCTTTCCCTGAAGGTCGCAAGAAGACTACTTGCTTGATAGGGTAGATGTGTAAGCGCAGTAATGCGTTTAGCTGACTACTACTAATAGACCGTTTGGCTTGTTTT"
adist(Sample2, Sample3)
adist(Sample2, Sample4)
adist(Sample3, Sample4)
sessionInfo()
tools:::.BioC_version_associated_with_R_version()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
tools:::.BioC_version_associated_with_R_version()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
tools:::.BioC_version_associated_with_R_version()
tools:::.BioC_version_associated_with_R_version()
R.version()
R.version
1e0
1e1
1e-1
setwd("~/Desktop/Projects/Dolphin/Prokka")
setwd("~/Desktop/Projects/Dolphin/Prokka/CompareFiles")
sample1 = readBStringSet("D/sample1_reordered/sample1_reordered.faa")
sample2 = readBStringSet("D/sample2_reordered/sample2_reordered.faa")
library(Biostrings)
sample1 = readBStringSet("D/sample1_reordered/sample1_reordered.faa")
sample1 = readBStringSet("D/sample1_reordered.faa")
sample2 = readBStringSet("D/sample2_reordered.faa")
sample3 = readBStringSet("D/sample3_reordered.faa")
sample4 = readBStringSet("D/sample4_reordered.faa")
seqName1 = names(sample1) #1747 (unique 1747)
seq1 = paste(sample1) #1747 (unique 1747)
seqName2 = names(sample2) #1418 (unique 1418)
seq2 = paste(sample2) #1418 (unique 1408)
seqName3 = names(sample3) #1397 (unique 1397)
seq3 = paste(sample3) #1397 (unique 1397)
seqName4 = names(sample4) #1394 (unique 1394)
seq4 = paste(sample4) #1394 (unique 1394)
# Sample 1 versus 2
uniqSeq12_1 = setdiff(seq1, seq2) #1745
uniqSeq12_2 = setdiff(seq2, seq1) #1406
overlapSeq12 = intersect(seq1, seq2) #2
# Sample 1 versus 3
uniqSeq13_1 = setdiff(seq1, seq3) #1745
uniqSeq13_3 = setdiff(seq3, seq1) #1395
overlapSeq13 = intersect(seq1, seq3) #2
# Sample 1 versus 4
uniqSeq14_1 = setdiff(seq1, seq4) #1745
uniqSeq14_4 = setdiff(seq4, seq1) #1392
overlapSeq14 = intersect(seq1, seq4) #2
# Sample 2 versus 3
uniqSeq23_2 = setdiff(seq2, seq3) #907
uniqSeq23_3 = setdiff(seq3, seq2) #896
overlapSeq23 = intersect(seq2, seq3) #501
# Sample 2 versus 4
uniqSeq24_2 = setdiff(seq2, seq4) #851
uniqSeq24_4 = setdiff(seq4, seq2) #837
overlapSeq24 = intersect(seq2, seq4) #557
# Sample 3 versus 4
uniqSeq34_3 = setdiff(seq3, seq4) #180
uniqSeq34_4 = setdiff(seq4, seq3) #177
overlapSeq34 = intersect(seq3, seq4) #1217
#Unique in Samples 2-4
overlapSeq234 = intersect(intersect(seq2, seq3), seq4) #477
uniqueSeq1234_1 = setdiff(seq1, overlapSeq234) #1745
uniqueSeq1234_234 = setdiff(overlapSeq234, seq1) #475
overlapSeq234Seq1 = intersect(overlapSeq234, seq1) #2
uniqueSeq1234_234
str(uniqueSeq1234_234)
write.table(uniqueSeq1234_234, file = "uniqueAA234.txt")
write.table(uniqueSeq1234_234, file = "uniqueAA234.txt", sep = "\t", row.names = TRUE, col.names = NA)
str(uniqueSeq1234_234)
uniqueSeq1234_234
write.table(uniqueSeq1234_234, file = "uniqueAA234.txt", sep = "\t", row.names = FALSE, col.names = NA)
write.table(uniqueSeq1234_234, file = "uniqueAA234.txt", sep = "\t")
setwd("~/Downloads/alembic-kit-remote-theme")
setwd("~/testMDRS.github.io/_posts")
